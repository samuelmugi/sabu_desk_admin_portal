{"version":3,"sources":["jdcomponents/JobApplicants/FIlter.js"],"names":["FETCH_LDAP_DETAILS","withReactContent","Swal","process","REACT_APP_KB_PORTAL_USER_FETCHADDETIALS","CREATE_USER","REACT_APP_KB_PORTAL_USER_CREATE","UPDATE_USER","REACT_APP_KB_PORTAL_USER_UPDATE","useStyles","makeStyles","theme","fab","margin","spacing","form","display","flexDirection","width","formControl","marginTop","minWidth","formControlLabel","FIlter","props","useState","open","setOpen","fullWidth","maxWidth","allRoles","allRolesref","setSubmitted","isSubmittedRef","setRolePermissions","rolePermissionsRef","username","email","firstName","lastName","userRole","userStatus","setFIlterValuesErrors","userValuesErrorsRef","valueIntoModal","userValues","setFIlterValues","userValuesRef","useEffect","a","action","current","permissions","changeHandler","e","prevValues","target","name","value","updateFIlterValues","validateValues","hasErrors","user","userErrors","Object","keys","map","key","undefined","console","log","saveFIlter","preventDefault","authorities","url","id","BackendService","postRequest","then","response","data","requestStatus","notifySuccess","message","notifyError","catch","error","resetBtn","fetchADDetails","userName","getRequest","JSON","parse","payload","accountname","firstname","lastname","stringify","handleRoleChange","handleClickOpen","handleClose","stringToHash","string","hash","length","i","charCodeAt","Fragment","content","trigger","positive","onClick","icon","disableBackdropClick","disableEscapeKeyDown","onClose","aria-labelledby","Group","Input","label","placeholder","pointing","onChange","Button","fluid","validators","defaultValue","selection","options","text","search","role","index","Date","getTime","toString","perm","Item","as","Content","Header","disabled","type","primary","defaultProps"],"mappings":"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","file":"static/js/22.d4d224bd.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport useState from 'react-usestateref';\nimport {Button, Divider, Dropdown, Form, Icon, Label, List, Popup} from 'semantic-ui-react';\nimport Aux from '../../hoc/_Aux';\nimport BackendService from \"../../services/BackendService\";\nimport {Col, Row} from \"react-bootstrap\";\nimport withReactContent from 'sweetalert2-react-content';\nimport Swal from 'sweetalert2';\n\nconst MySwal = withReactContent(Swal);\nconst FETCH_LDAP_DETAILS = process.env.REACT_APP_KB_PORTAL_USER_FETCHADDETIALS;\nconst CREATE_USER = process.env.REACT_APP_KB_PORTAL_USER_CREATE;\nconst UPDATE_USER = process.env.REACT_APP_KB_PORTAL_USER_UPDATE;\n\n\nconst useStyles = makeStyles((theme) => ({\n    fab: {\n        margin: theme.spacing(1)\n    },\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 'auto',\n        width: 'fit-content'\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        minWidth: 120\n    },\n    formControlLabel: {\n        marginTop: theme.spacing(1)\n    }\n}));\n\nconst FIlter = (props) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [mounted, setMount] = useState(false);\n    const [fullWidth, setFullWidth] = useState(true);\n    const [maxWidth, setMaxWidth] = useState('sm');\n    const [allRoles, setAllRoles, allRolesref] = useState(props?.allRoles);\n    const [isSubmitted, setSubmitted, isSubmittedRef] = useState(false);\n    const [rolePermissions, setRolePermissions, rolePermissionsRef] = useState([]);\n    const [userValuesErrors, setFIlterValuesErrors, userValuesErrorsRef] = useState({\n        username: '',\n        email: '',\n        firstName: '',\n        lastName: '',\n        userRole: '',\n        userStatus: ''\n    });\n    const [userValues, setFIlterValues, userValuesRef] = useState(props?.valueIntoModal);\n    useEffect(() => {\n        (async function () {\n            if (props.action === 'edit') {\n                setRolePermissions(userValuesRef.current?.userRole.permissions);\n            }\n\n        })();\n    }, [userValues]);\n\n    const changeHandler = (e) => {\n        setFIlterValues((prevValues) => {\n            return {...prevValues, [e.target.name]: e.target.value};\n        });\n    };\n    const updateFIlterValues = (name, value) => {\n        setFIlterValues((prevValues) => {\n            return {...prevValues, [name]: value};\n        });\n    };\n    const validateValues = () => {\n        let hasErrors = false;\n\n        const user = userValuesRef.current;\n        const userErrors = userValuesErrorsRef.current;\n        setFIlterValuesErrors({\n            username: '',\n            email: '',\n            firstName: '',\n            lastName: '',\n            userRole: '',\n            userStatus: ''\n        });\n        Object.keys(userErrors).map((key) => {\n            if (user[key] === null || user[key] === '' || user[key] === undefined) {\n                console.log(key + ' key and value is ' + user[key]);\n                setFIlterValuesErrors((prevValues) => {\n                    return {...prevValues, [key]: key + ' is required'};\n                });\n                hasErrors = true\n                ;\n            }\n        });\n\n        return hasErrors;\n    }\n    const saveFIlter = async (e) => {\n        e.preventDefault();\n        setSubmitted(true);\n        const hasErrors = validateValues();\n        if (!hasErrors) {\n            delete userValuesRef.current?.authorities;\n            const url = props.action === 'add' ? CREATE_USER : UPDATE_USER + '/' + userValuesRef.current?.id;\n            await BackendService.postRequest(url, userValuesRef.current)\n                .then((response) => {\n                    const data = response.data;\n\n                    if (data?.requestStatus) {\n                        BackendService.notifySuccess(data.message);\n\n                    } else {\n                        BackendService.notifyError(data.message);\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                    BackendService.notifyError('Oops... Something went wrong!!!');\n                });\n            resetBtn(e);\n        }\n    };\n\n\n    const resetBtn = async () => {\n        setSubmitted(false);\n        setRolePermissions([]);\n        setFIlterValues({\n            username: '',\n            email: '',\n            firstName: '',\n            lastName: '',\n            userRole: '',\n            userStatus: ''\n        });\n        setFIlterValuesErrors({\n            username: '',\n            email: '',\n            firstName: '',\n            lastName: '',\n            userRole: '',\n            userStatus: ''\n        });\n    };\n\n    const fetchADDetails = async () => {\n        const userName = userValuesRef.current.username;\n        try {\n            const response = await BackendService.getRequest(\n                FETCH_LDAP_DETAILS + '?username=' + userName\n            );\n            const data = JSON.parse(response.data?.payload);\n            const username = data?.accountname;\n            updateFIlterValues('username', username);\n\n            const firstname = data?.firstname;\n            updateFIlterValues('firstName', firstname);\n\n            const email = data?.email;\n            updateFIlterValues('email', email);\n\n            const lastname = data?.lastname;\n            updateFIlterValues('lastName', lastname);\n\n            console.log('userValuesRef==' + JSON.stringify(userValuesRef.current));\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    const handleRoleChange = async (e, {value}) => {\n        setRolePermissions(JSON.parse(value)?.permissions);\n        updateFIlterValues('userRole', JSON.parse(value));\n    };\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const stringToHash = (string) => {\n        var hash = 0;\n        if (string.length == 0) return hash;\n        for (let i = 0; i < string.length; i++) {\n            let char = string.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash;\n        }\n        return hash;\n    }\n\n\n    return (\n        <Aux>\n            <React.Fragment>\n                <Popup\n                    content={props?.action === 'add' ? \"Add FIlter\" : \"Edit FIlter\"}\n                    trigger={\n                        (props?.action === 'add'\n                            ? (<Button positive onClick={handleClickOpen} icon=\"add\"/>)\n                            : (<Button onClick={handleClickOpen} icon=\"edit\"/>))\n\n                    }\n                />\n\n                <Dialog\n                    disableBackdropClick\n                    disableEscapeKeyDown\n                    fullWidth={fullWidth}\n                    maxWidth={maxWidth}\n                    open={open}\n                    onClose={handleClose}\n                    aria-labelledby=\"max-width-dialog-title\"\n                >\n                    <DialogTitle\n                        id=\"max-width-dialog-title\">{props?.action === 'add' ? \"Add FIlter\" : \"Edit FIlter\"}</DialogTitle>\n                    <DialogContent>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Form.Group>\n                                        <Form.Input\n                                            label=\"Windows FIltername\"\n                                            placeholder=\"Windows FIltername\"\n                                            name=\"username\"\n                                            error={userValuesErrorsRef.current?.username === '' ? false : {\n                                                content: userValuesErrorsRef.current?.username,\n                                                pointing: 'below'\n                                            }}\n                                            value={userValuesRef.current?.username}\n                                            onChange={changeHandler}\n                                        />\n                                        <Form.Button\n                                            positive\n                                            label=\"Fetch A.D. FIlter Details...\"\n                                            content=\"Fetch...\"\n                                            onClick={fetchADDetails}\n                                        />\n\n                                    </Form.Group>\n                                </Form>\n                            </Col>\n                        </Row>\n                        <Divider/>\n                        <Form>\n                            <Row>\n                                <Col>\n                                    <Form.Input\n                                        fluid\n                                        label=\"First name\"\n                                        placeholder=\"First name\"\n                                        name=\"firstName\"\n                                        error={userValuesErrorsRef.current?.firstName === '' ? false : {\n                                            content: userValuesErrorsRef.current?.firstName,\n                                            pointing: 'below'\n                                        }} value={userValuesRef.current?.firstName}\n                                        onChange={changeHandler}\n                                    />\n                                </Col>\n                                <Col>\n                                    <Form.Input\n                                        fluid\n                                        label=\"Last name\"\n                                        placeholder=\"Last name\"\n                                        name=\"lastName\"\n                                        error={userValuesErrorsRef.current?.lastName === '' ? false : {\n                                            content: userValuesErrorsRef.current?.lastName,\n                                            pointing: 'below'\n                                        }} value={userValuesRef.current?.lastName}\n                                        onChange={changeHandler}\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Divider/>\n                            <Row>\n                                <Col>\n                                    <Form.Input\n                                        fluid\n                                        label=\"Email\"\n                                        placeholder=\"Email\"\n                                        name=\"email\"\n                                        error={userValuesErrorsRef.current?.email === '' ? false : {\n                                            content: userValuesErrorsRef.current?.email,\n                                            pointing: 'below'\n                                        }} value={userValuesRef.current?.email}\n                                        onChange={changeHandler}\n                                    />\n                                </Col>\n                                <Col>\n                                    <Label>\n                                        FIlter Status\n                                    </Label>\n                                    <Dropdown\n                                        placeholder=\"FIlter Status\"\n                                        name=\"userStatus\"\n                                        validators={['required']}\n                                        onChange={(e, {value}) => {\n                                            setFIlterValues((prevValues) => {\n                                                return {...prevValues, userStatus: value};\n                                            })\n                                        }}\n                                        defaultValue={userValuesRef.current?.userStatus}\n                                        error={userValuesErrorsRef.current?.userStatus === '' ? false : true}\n                                        selection\n                                        options={[{key: 'active', value: true, text: 'Active'}, {\n                                            key: 'inactive', value: false, text: 'In-Active'\n                                        }]}\n                                    />\n                                </Col>\n                            </Row>\n                            <Divider/>\n                            <Row>\n                                <Col>\n                                    <Label>\n                                        FIlter Role\n                                    </Label>\n                                    <Dropdown\n                                        placeholder=\"FIlter Role\"\n                                        name=\"userRole\"\n                                        search\n                                        error={userValuesErrorsRef.current?.userRole === '' ? false : true}\n                                        selection\n                                        defaultValue={JSON.stringify(userValuesRef.current?.userRole)}\n\n                                        onChange={handleRoleChange}\n                                        options={allRolesref.current}\n                                    />\n                                </Col>\n                                <Col>\n                                    <List>\n                                        {rolePermissionsRef.current && (rolePermissionsRef.current.map((role, index) => {\n                                            const key = index + (new Date()).getTime().toString(36) + JSON.parse(role)?.perm;\n                                            return (\n                                                <>\n                                                    <List.Item key={stringToHash(key)} as='a'>\n                                                        <Icon name='check circle'/>\n                                                        <List.Content key={key}>\n                                                            <List.Header>{JSON.parse(role)?.perm}</List.Header>\n                                                        </List.Content>\n                                                    </List.Item>\n                                                </>\n                                            )\n                                        }))\n                                        }\n\n                                    </List>\n                                </Col>\n\n                            </Row>\n                            <Divider/>\n\n                        </Form>\n\n                    </DialogContent>\n                    <DialogActions>\n                        <Button.Group>\n                            <Button\n                                disabled={isSubmittedRef.current}\n                                type=\"submit\"\n                                onClick={saveFIlter}\n                                positive\n                            >\n                                Save\n                            </Button>\n                            <Button onClick={resetBtn}>Reset</Button>\n                            <Button onClick={handleClose} primary>\n                                Close\n                            </Button>\n                        </Button.Group>\n                    </DialogActions>\n                </Dialog>\n            </React.Fragment>\n        </Aux>\n    );\n};\nFIlter.propTypes = {\n    modalOpen: PropTypes.bool.isRequired,\n    action: PropTypes.string.isRequired,\n    valueIntoModal: PropTypes.object.isRequired,\n    allRoles: PropTypes.array.isRequired,\n};\n\nFIlter.defaultProps = {};\n\nexport default FIlter;\n"],"sourceRoot":""}