{"version":3,"sources":["jdcomponents/Users/constants.js","jdcomponents/Users/UsersGroups.js"],"names":["module","exports","Object","freeze","tableColumnsUsers","id","label","minWidth","format","value","name","tableColumnsUserGroups","columns","constants","AddUserGroup","React","lazy","useStyles","makeStyles","root","width","container","maxHeight","USER_LIST_URL","process","REACT_APP_KB_PORTAL_USER_LIST","USER_SEARCH_URL","REACT_APP_KB_PORTAL_USER_SEARCH","LIST_ALL_ROLES","REACT_APP_KB_PORTAL_USER_LIST_ALL_ROLES","Users","classes","useState","page","setPage","pageRef","rowsPerPage","setRowsPerPage","rowsPerPageRef","setTotalElements","totalElementsref","setRowData","rowDataref","setSearchNotFound","searchNotFoundref","setSearchValue","searchValueref","setIsLoading","isLoadingref","setModalOpen","modalOpenref","key","text","setAllRoles","allRolesref","setMount","mountedRef","fetchData","a","currentPage","current","BackendService","getPaginatedRequest","response","data","payload","content","totalElements","console","error","fetchRoles","getRequest","roles","map","role","push","JSON","stringify","handleSearchChange","toFilter","filter","item","username","toUpperCase","includes","length","filterData","useEffect","Body","className","md","active","indeterminate","onClick","primary","icon","Append","placeholder","aria-label","aria-describedby","onChange","e","target","action","modalOpen","handleClose","allRoles","valueIntoModal","email","firstName","lastName","userRole","userStatus","rowsPerPageOptions","component","count","onChangePage","event","newPage","onChangeRowsPerPage","size","stickyHeader","style","column","align","row","index","hover","tabIndex","defaultProps"],"mappings":"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","file":"static/js/25.ace5f4b5.chunk.js","sourcesContent":["module.exports = Object.freeze({\n    tableColumnsUsers: [\n        {id: 'username', label: 'username', minWidth: 170},\n        {id: 'firstName', label: 'firstName', minWidth: 170},\n        {id: 'lastName', label: 'lastName', minWidth: 170},\n        {id: 'email', label: 'email', minWidth: 170},\n        {id: 'createdOn', label: 'Date Created', minWidth: 170},\n        {\n            id: 'userStatus',\n            label: 'User Status',\n            minWidth: 170,\n            format: (value) => (value === true ? 'ACTIVE' : 'IN-ACTIVE')\n        },\n        {\n            id: 'userRole',\n            label: 'Roles',\n            minWidth: 170,\n            format: (value) => value?.name\n        }\n    ],\n    tableColumnsUserGroups: [\n        {id: 'Name', label: 'name', minWidth: 170},\n        {id: 'Status', label: 'Status', minWidth: 170},\n\n    ]\n});\n"," import PropTypes from 'prop-types';\nimport './Users.scss';\n import React, {useEffect} from 'react';\n import {Card, Col, FormControl, InputGroup, Row} from 'react-bootstrap';\n import {Button, Dimmer, Loader, Segment} from 'semantic-ui-react';\n import {makeStyles} from '@material-ui/core/styles';\n import Paper from '@material-ui/core/Paper';\n import Table from '@material-ui/core/Table';\n import TableBody from '@material-ui/core/TableBody';\n import TableCell from '@material-ui/core/TableCell';\n import TableContainer from '@material-ui/core/TableContainer';\n import TableHead from '@material-ui/core/TableHead';\n import TablePagination from '@material-ui/core/TablePagination';\n import TableRow from '@material-ui/core/TableRow';\n import useState from 'react-usestateref';\n import BackendService from '../../services/BackendService';\n import Aux from '../../hoc/_Aux';\n import constants from './constants'\n\n const columns = constants.tableColumnsUserGroups;\n\n const AddUserGroup = React.lazy(() => import('./AddUserGroup'));\n\n\n const useStyles = makeStyles({\n     root: {\n         width: '100%'\n     },\n     container: {\n         maxHeight: 440\n     }\n });\n\n const USER_LIST_URL = process.env.REACT_APP_KB_PORTAL_USER_LIST;\n const USER_SEARCH_URL = process.env.REACT_APP_KB_PORTAL_USER_SEARCH;\n const LIST_ALL_ROLES = process.env.REACT_APP_KB_PORTAL_USER_LIST_ALL_ROLES;\n\n const Users = () => {\n     const classes = useStyles();\n     const [page, setPage, pageRef] = useState(0);\n     const [rowsPerPage, setRowsPerPage, rowsPerPageRef] = useState(10);\n     const [totalElements, setTotalElements, totalElementsref] = useState(0);\n     const [rowData, setRowData, rowDataref] = useState([]);\n     const [searchNotFound, setSearchNotFound, searchNotFoundref] = useState(false);\n     const [searchValue, setSearchValue, searchValueref] = useState('');\n     const [isLoading, setIsLoading, isLoadingref] = useState(false);\n     const [modalOpen, setModalOpen, modalOpenref] = useState(false);\n     const [allRoles, setAllRoles, allRolesref] = useState([{key: 0, text: '', value: '0'}]);\n     const [mounted, setMount, mountedRef] = useState(false);\n\n     const handleChangePage = (event, newPage) => {\n         setPage(newPage);\n     };\n\n     const handleChangeRowsPerPage = (event) => {\n         setRowsPerPage(+event.target.value);\n         setPage(0);\n     };\n\n     const fetchData = async () => {\n         try {\n             const currentPage = pageRef.current < 0 ? 0 : pageRef.current;\n             const response = await BackendService.getPaginatedRequest(\n                 searchNotFoundref.current ? USER_SEARCH_URL : USER_LIST_URL,\n                 currentPage,\n                 rowsPerPageRef.current,\n                 searchValueref.current\n             );\n             const data = response.data;\n             setRowData(data.payload.content);\n             setTotalElements(data.payload.totalElements);\n             setIsLoading(false);\n         } catch (e) {\n             console.error(e);\n         }\n\n         await fetchRoles();\n     };\n\n     const fetchRoles = async () => {\n         // BackendService.validateMenu( );\n         if (!mountedRef.current) {\n             try {\n                 const response = await BackendService.getRequest(LIST_ALL_ROLES);\n                 const data = response.data?.payload;\n                 let roles = [];\n                 data.map((role) => {\n                     roles.push({\n                         key: role.id,\n                         text: role.name,\n                         value: JSON.stringify(role)\n                     });\n                 });\n                 setAllRoles(roles);\n                 setMount(true);\n             } catch (e) {\n                 console.error(e);\n             }\n         }\n     };\n     const filterData = (value) => {\n         let toFilter = rowDataref.current;\n         toFilter = toFilter.filter(function (item) {\n             return item.username.toUpperCase().includes(value.toUpperCase());\n         }).map(function (item) {\n             return item;\n         });\n         setRowData(toFilter);\n         return toFilter.length > 0;\n     };\n     const handleSearchChange = (value) => {\n         setSearchValue(value);\n         setIsLoading(true);\n         if (filterData(value)) {\n             setIsLoading(false);\n         } else {\n             setSearchNotFound(true);\n         }\n     };\n\n     useEffect(() => {\n         (async function () {\n             fetchData();\n         })();\n     }, [page, rowsPerPage, setSearchNotFound]);\n\n     const resetData = () => {\n         setSearchNotFound(false);\n         setIsLoading(false);\n         setSearchValue('');\n         fetchData();\n     };\n\n     return (\n         <Aux>\n             <Row>\n                 <Col>\n                     <Card>\n                         <Card.Body>\n                             <Row>\n                                 <Col>\n                                     <Paper className={classes.root}>\n                                         <Row>\n                                             <Col md={'auto'}>\n\n                                                 <Dimmer active={isLoadingref.current}>\n                                                     <Loader indeterminate>Searching payment ...</Loader>\n                                                 </Dimmer>\n                                                 <InputGroup className=\"mb-3\">\n                                                     <Button\n                                                         onClick={resetData}\n                                                         primary\n                                                         icon=\"refresh\"\n                                                     ></Button>\n                                                     <InputGroup.Append>\n                                                         <FormControl\n                                                             placeholder=\"search...\"\n                                                             aria-label=\"search...\"\n                                                             value={searchValueref.current}\n                                                             aria-describedby=\"basic-addon2\"\n                                                             onChange={(e) => handleSearchChange(e.target.value)}\n                                                         />\n                                                     </InputGroup.Append>\n                                                     <InputGroup.Append>\n                                                         <AddUserGroup // The invisible modal itself\n                                                             key=\"modal1\"\n                                                             action={\"add\"}\n                                                             modalOpen={modalOpenref.current}\n                                                             handleClose={() => {\n                                                                 setModalOpen(false);\n                                                             }}\n                                                             allRoles={allRolesref.current}\n                                                             valueIntoModal={{\n                                                                 username: '',\n                                                                 email: '',\n                                                                 firstName: '',\n                                                                 lastName: '',\n                                                                 userRole: '',\n                                                                 userStatus: ''\n                                                             }}\n                                                         />\n                                                     </InputGroup.Append>\n                                                 </InputGroup>\n                                             </Col>\n                                             <Col>\n\n                                                 <TablePagination\n                                                     rowsPerPageOptions={[10, 25, 100]}\n                                                     component=\"div\"\n                                                     count={totalElementsref.current}\n                                                     rowsPerPage={rowsPerPageRef.current}\n                                                     page={pageRef.current}\n                                                     onChangePage={handleChangePage}\n                                                     onChangeRowsPerPage={handleChangeRowsPerPage}\n                                                 />\n                                             </Col>\n                                         </Row>\n                                         <Row>\n                                             <Col>\n                                                 <TableContainer className={classes.container}>\n                                                     <Table\n                                                         size=\"small\"\n                                                         stickyHeader\n                                                         aria-label=\" sticky table\"\n                                                     >\n                                                         <TableHead>\n                                                             <TableRow>\n                                                                 <TableCell\n                                                                     key=\"0\"\n                                                                     style={({minWidth: 10})}\n                                                                 >\n                                                                     No\n                                                                 </TableCell>\n                                                                 {columns.map((column) => (\n                                                                     <TableCell\n                                                                         key={column.id}\n                                                                         align={column.align}\n                                                                         style={{minWidth: column.minWidth}}\n                                                                     >\n                                                                         {column.label}\n                                                                     </TableCell>\n                                                                 ))}\n                                                             </TableRow>\n                                                         </TableHead>\n                                                         <TableBody>\n                                                             {rowDataref.current.map((row, index) => {\n                                                                 return (\n                                                                     <TableRow\n                                                                         hover\n                                                                         role=\"checkbox\"\n                                                                         tabIndex={-1}\n                                                                         key={row.id}\n                                                                     >\n                                                                         <TableCell\n                                                                             key={index + 1}\n                                                                             style={({minWidth: 10})}\n                                                                         >\n                                                                             {index + 1}\n                                                                         </TableCell>\n                                                                         {columns.map((column) => {\n                                                                             const value = row[column.id];\n                                                                             return (\n                                                                                 <TableCell\n                                                                                     key={column.id}\n                                                                                     align={column.align}\n                                                                                     style={{minWidth: column.minWidth}}\n                                                                                 >\n                                                                                     {column.format\n                                                                                         ? column.format(value)\n                                                                                         : value}\n                                                                                 </TableCell>\n                                                                             );\n                                                                         })}\n                                                                         <TableCell key={row.id + '' + index + 1}>\n                                                                             <AddUserGroup // The invisible modal itself\n                                                                                 key={row.id + '' + index + 7}\n                                                                                 action={\"edit\"}\n                                                                                 modalOpen={modalOpenref.current}\n                                                                                 handleClose={() => {\n                                                                                     setModalOpen(false);\n                                                                                 }}\n                                                                                 allRoles={allRolesref.current}\n                                                                                 valueIntoModal={row}\n                                                                             />\n                                                                         </TableCell>\n                                                                     </TableRow>\n                                                                 );\n                                                             })}\n                                                         </TableBody>\n                                                     </Table>\n                                                 </TableContainer>\n                                             </Col>\n                                         </Row>\n\n\n                                     </Paper>\n                                 </Col>\n                             </Row>\n                         </Card.Body>\n                     </Card>\n                 </Col>\n             </Row>\n         </Aux>\n     );\n };\n\nUsers.propTypes = {};\n\nUsers.defaultProps = {};\n\nexport default Users;\n"],"sourceRoot":""}