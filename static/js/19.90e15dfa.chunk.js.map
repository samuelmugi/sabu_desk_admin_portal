{"version":3,"sources":["jdcomponents/Reports/constants.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentGroup.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentInline.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/Segment.js","jdcomponents/Reports/Reports.js"],"names":["module","exports","Object","freeze","tableColumns","id","label","minWidth","format","value","name","SegmentGroup","props","children","className","compact","content","horizontal","piled","raised","size","stacked","classes","cx","useKeyOnly","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","SegmentInline","Segment","attached","basic","circular","clearing","color","disabled","floated","inverted","loading","placeholder","padded","secondary","tertiary","textAlign","vertical","useKeyOrValueAndKey","useTextAlignProp","useValueAndKey","Group","Inline","columns","constants","useStyles","makeStyles","root","width","container","maxHeight","USER_LIST_URL","process","REACT_APP_KB_PORTAL_USER_LIST","USER_SEARCH_URL","REACT_APP_KB_PORTAL_USER_SEARCH","LIST_ALL_ROLES","REACT_APP_KB_PORTAL_USER_LIST_ALL_ROLES","Reports","useState","page","setPage","pageRef","rowsPerPage","setRowsPerPage","rowsPerPageRef","setTotalElements","totalElementsref","setRowData","rowDataref","setSearchNotFound","searchNotFoundref","setSearchValue","searchValueref","setIsLoading","isLoadingref","key","text","setAllRoles","setMount","mountedRef","fetchData","a","currentPage","current","BackendService","getPaginatedRequest","response","data","payload","totalElements","console","error","fetchRoles","getRequest","roles","map","role","push","JSON","stringify","handleSearchChange","toFilter","filter","item","username","toUpperCase","includes","length","filterData","useEffect","Row","Col","Card","Header","Title","as","Body","Paper","Dimmer","active","Loader","indeterminate","InputGroup","Button","onClick","primary","icon","Append","FormControl","aria-label","aria-describedby","onChange","e","target","TablePagination","rowsPerPageOptions","component","count","onChangePage","event","newPage","onChangeRowsPerPage","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","style","column","align","TableBody","row","index","hover","tabIndex","defaultProps"],"mappings":"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","file":"static/js/19.90e15dfa.chunk.js","sourcesContent":["module.exports = Object.freeze({\n    tableColumns: [\n        {id: 'username', label: 'username', minWidth: 170},\n        {id: 'firstName', label: 'firstName', minWidth: 170},\n        {id: 'lastName', label: 'lastName', minWidth: 170},\n        {id: 'email', label: 'email', minWidth: 170},\n        {id: 'createdOn', label: 'Date Created', minWidth: 170},\n        {\n            id: 'userStatus',\n            label: 'User Status',\n            minWidth: 170,\n            format: (value) => (value === true ? 'ACTIVE' : 'IN-ACTIVE')\n        },\n        {\n            id: 'userRole',\n            label: 'Roles',\n            minWidth: 170,\n            format: (value) => value?.name\n        }\n    ]\n});\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * A group of segments can be formatted to appear together.\n */\n\nfunction SegmentGroup(props) {\n  var children = props.children,\n      className = props.className,\n      compact = props.compact,\n      content = props.content,\n      horizontal = props.horizontal,\n      piled = props.piled,\n      raised = props.raised,\n      size = props.size,\n      stacked = props.stacked;\n  var classes = cx('ui', size, useKeyOnly(compact, 'compact'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(stacked, 'stacked'), 'segments', className);\n  var rest = getUnhandledProps(SegmentGroup, props);\n  var ElementType = getElementType(SegmentGroup, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentGroup.handledProps = [\"as\", \"children\", \"className\", \"compact\", \"content\", \"horizontal\", \"piled\", \"raised\", \"size\", \"stacked\"];\nSegmentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Formats content to be aligned horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment group may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment group can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool\n} : {};\nexport default SegmentGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A placeholder segment can be inline.\n */\n\nfunction SegmentInline(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('inline', className);\n  var rest = getUnhandledProps(SegmentInline, props);\n  var ElementType = getElementType(SegmentInline, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentInline.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nSegmentInline.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default SegmentInline;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useValueAndKey } from '../../lib';\nimport SegmentGroup from './SegmentGroup';\nimport SegmentInline from './SegmentInline';\n/**\n * A segment is used to create a grouping of related content.\n */\n\nfunction Segment(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      children = props.children,\n      circular = props.circular,\n      className = props.className,\n      clearing = props.clearing,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      disabled = props.disabled,\n      floated = props.floated,\n      inverted = props.inverted,\n      loading = props.loading,\n      placeholder = props.placeholder,\n      padded = props.padded,\n      piled = props.piled,\n      raised = props.raised,\n      secondary = props.secondary,\n      size = props.size,\n      stacked = props.stacked,\n      tertiary = props.tertiary,\n      textAlign = props.textAlign,\n      vertical = props.vertical;\n  var classes = cx('ui', color, size, useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(clearing, 'clearing'), useKeyOnly(compact, 'compact'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(placeholder, 'placeholder'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stacked, 'stacked'), useKeyOnly(tertiary, 'tertiary'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), 'segment', className);\n  var rest = getUnhandledProps(Segment, props);\n  var ElementType = getElementType(Segment, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegment.handledProps = [\"as\", \"attached\", \"basic\", \"children\", \"circular\", \"className\", \"clearing\", \"color\", \"compact\", \"content\", \"disabled\", \"floated\", \"inverted\", \"loading\", \"padded\", \"piled\", \"placeholder\", \"raised\", \"secondary\", \"size\", \"stacked\", \"tertiary\", \"textAlign\", \"vertical\"];\nSegment.Group = SegmentGroup;\nSegment.Inline = SegmentInline;\nSegment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach segment to other content, like a header. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A basic segment has no special formatting. */\n  basic: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** A segment can be circular. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment can clear floated content. */\n  clearing: PropTypes.bool,\n\n  /** Segment can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A segment may show its content is disabled. */\n  disabled: PropTypes.bool,\n\n  /** Segment content can be floated to the left or right. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted: PropTypes.bool,\n\n  /** A segment may show its content is being loaded. */\n  loading: PropTypes.bool,\n\n  /** A segment can increase its padding. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A segment can be used to reserve space for conditionally displayed content. */\n  placeholder: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment can be formatted to appear less noticeable. */\n  secondary: PropTypes.bool,\n\n  /** A segment can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool,\n\n  /** A segment can be formatted to appear even less noticeable. */\n  tertiary: PropTypes.bool,\n\n  /** Formats content to be aligned as part of a vertical group. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** Formats content to be aligned vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Segment;","import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport './Reports.scss';\nimport useState from \"react-usestateref\";\nimport BackendService from \"../../services/BackendService\";\nimport Aux from \"../../hoc/_Aux\";\nimport {Card, Col, FormControl, InputGroup, Row} from \"react-bootstrap\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {Button, Dimmer, Loader, Segment} from \"semantic-ui-react\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport constants from './constants'\n\nconst columns = constants.tableColumns;\n\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%'\n    },\n    container: {\n        maxHeight: 440\n    }\n});\n\nconst USER_LIST_URL = process.env.REACT_APP_KB_PORTAL_USER_LIST;\nconst USER_SEARCH_URL = process.env.REACT_APP_KB_PORTAL_USER_SEARCH;\nconst LIST_ALL_ROLES = process.env.REACT_APP_KB_PORTAL_USER_LIST_ALL_ROLES;\n\nconst Reports = () => {\n    const classes = useStyles();\n    const [page, setPage, pageRef] = useState(0);\n    const [rowsPerPage, setRowsPerPage, rowsPerPageRef] = useState(10);\n    const [totalElements, setTotalElements, totalElementsref] = useState(0);\n    const [rowData, setRowData, rowDataref] = useState([]);\n    const [searchNotFound, setSearchNotFound, searchNotFoundref] = useState(false);\n    const [searchValue, setSearchValue, searchValueref] = useState('');\n    const [isLoading, setIsLoading, isLoadingref] = useState(false);\n    const [modalOpen, setModalOpen, modalOpenref] = useState(false);\n    const [allRoles, setAllRoles, allRolesref] = useState([{key: 0, text: '', value: '0'}]);\n    const [mounted, setMount, mountedRef] = useState(false);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const fetchData = async () => {\n        try {\n            const currentPage = pageRef.current < 0 ? 0 : pageRef.current;\n            const response = await BackendService.getPaginatedRequest(\n                searchNotFoundref.current ? USER_SEARCH_URL : USER_LIST_URL,\n                currentPage,\n                rowsPerPageRef.current,\n                searchValueref.current\n            );\n            const data = response.data;\n            setRowData(data.payload.content);\n            setTotalElements(data.payload.totalElements);\n            setIsLoading(false);\n        } catch (e) {\n            console.error(e);\n        }\n\n        await fetchRoles();\n    };\n\n    const fetchRoles = async () => {\n        // BackendService.validateMenu( );\n        if(!mountedRef.current){\n            try {\n                const response = await BackendService.getRequest(LIST_ALL_ROLES);\n                const data = response.data?.payload;\n                let roles = [];\n                data.map((role) => {\n                    roles.push({\n                        key: role.id,\n                        text: role.name,\n                        value: JSON.stringify(role)\n                    });\n                });\n                setAllRoles(roles);\n                setMount(true);\n            } catch (e) {\n                console.error(e);\n            }}\n    };\n    const filterData = (value) => {\n        let toFilter = rowDataref.current;\n        toFilter = toFilter.filter(function (item) {\n            return item.username.toUpperCase().includes(value.toUpperCase());\n        }).map(function (item) {\n            return item;\n        });\n        setRowData(toFilter);\n        return toFilter.length > 0;\n    };\n    const handleSearchChange = (value) => {\n        setSearchValue(value);\n        setIsLoading(true);\n        if (filterData(value)) {\n            setIsLoading(false);\n        } else {\n            setSearchNotFound(true);\n        }\n    };\n\n    useEffect(() => {\n        (async function () {\n            fetchData();\n        })();\n    }, [page, rowsPerPage, setSearchNotFound]);\n\n    const resetData = () => {\n        setSearchNotFound(false);\n        setIsLoading(false);\n        setSearchValue('');\n        fetchData();\n    };\n\n    return (\n        <Aux>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title as=\"h5\">User(s) List</Card.Title>\n                        </Card.Header>\n                        <Card.Body>\n                            <Row>\n                                <Col>\n                                    <Paper className={classes.root}>\n                                        <Segment>\n                                            <Dimmer active={isLoadingref.current}>\n                                                <Loader indeterminate>Searching payment ...</Loader>\n                                            </Dimmer>\n                                            <InputGroup className=\"mb-3\">\n                                                <Button\n                                                    onClick={resetData}\n                                                    primary\n                                                    icon=\"refresh\"\n                                                ></Button>\n                                                <InputGroup.Append>\n                                                    <FormControl\n                                                        placeholder=\"search...\"\n                                                        aria-label=\"search...\"\n                                                        value={searchValueref.current}\n                                                        aria-describedby=\"basic-addon2\"\n                                                        onChange={(e) => handleSearchChange(e.target.value)}\n                                                    />\n                                                </InputGroup.Append>\n                                             </InputGroup>\n                                        </Segment>\n\n                                        <TablePagination\n                                            rowsPerPageOptions={[10, 25, 100]}\n                                            component=\"div\"\n                                            count={totalElementsref.current}\n                                            rowsPerPage={rowsPerPageRef.current}\n                                            page={pageRef.current}\n                                            onChangePage={handleChangePage}\n                                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                                        />\n                                        <TableContainer className={classes.container}>\n                                            <Table\n                                                size=\"small\"\n                                                stickyHeader\n                                                aria-label=\" sticky table\"\n                                            >\n                                                <TableHead>\n                                                    <TableRow>\n                                                        <TableCell\n                                                            key=\"0\"\n                                                            style={({minWidth: 10})}\n                                                        >\n                                                            No\n                                                        </TableCell>\n                                                        {columns.map((column) => (\n                                                            <TableCell\n                                                                key={column.id}\n                                                                align={column.align}\n                                                                style={{minWidth: column.minWidth}}\n                                                            >\n                                                                {column.label}\n                                                            </TableCell>\n                                                        ))}\n                                                    </TableRow>\n                                                </TableHead>\n                                                <TableBody>\n                                                    {rowDataref.current.map((row, index) => {\n                                                        return (\n                                                            <TableRow\n                                                                hover\n                                                                role=\"checkbox\"\n                                                                tabIndex={-1}\n                                                                key={row.id}\n                                                            >\n                                                                <TableCell\n                                                                    key={index + 1}\n                                                                    style={({minWidth: 10})}\n                                                                >\n                                                                    {index + 1}\n                                                                </TableCell>\n                                                                {columns.map((column) => {\n                                                                    const value = row[column.id];\n                                                                    return (\n                                                                        <TableCell\n                                                                            key={column.id}\n                                                                            align={column.align}\n                                                                            style={{minWidth: column.minWidth}}\n                                                                        >\n                                                                            {column.format\n                                                                                ? column.format(value)\n                                                                                : value}\n                                                                        </TableCell>\n                                                                    );\n                                                                })}\n\n                                                            </TableRow>\n                                                        );\n                                                    })}\n                                                </TableBody>\n                                            </Table>\n                                        </TableContainer>\n                                    </Paper>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Aux>\n    );\n};\n\nReports.propTypes = {};\n\nReports.defaultProps = {};\n\nexport default Reports;\n"],"sourceRoot":""}