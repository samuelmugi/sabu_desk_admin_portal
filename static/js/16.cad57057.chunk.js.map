{"version":3,"sources":["services/AuthenticationService.js","jdcomponents/Authentication/SignIn/SignIn1.js"],"names":["headers","Accept","signin","username","password","a","process","loginRequest","axios","post","baseURL","then","response","data","accessToken","sessionStorage","setItem","JSON","stringify","console","log","catch","err","SignOut","push","useHistory","clear","register","firstname","lastname","email","getCurrentUser","parse","localStorage","getItem","toast","configure","SignUp1","useState","form","setForm","errors","setErrors","setField","field","value","doLogin","event","preventDefault","newErrors","findFormErrors","Object","keys","length","success","position","autoClose","transition","Zoom","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","Breadcrumb","className","Form","Group","controlId","Label","Control","type","placeholder","onChange","e","target","isInvalid","Feedback","Button","onClick","variant","prototype","hasOwnProperty","call","Alert","logError"],"mappings":"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","file":"static/js/16.cad57057.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nconst headers = {\r\n    'Content-Type': 'application/json;charset=UTF-8',\r\n    'Access-Control-Allow-Origin': '*',\r\n    Accept: 'application/json'\r\n};\r\n\r\nclass AuthenticationService {\r\n    signin = async (username, password) => {\r\n        const baseURL = process.env.REACT_APP_KB_PORTAL_BASE_URL;\r\n        const singinURL = process.env.REACT_APP_KB_PORTAL_SIGN_IN;\r\n        const loginRequest = {username: username, password: password};\r\n        return axios\r\n            .post(baseURL + singinURL, loginRequest, headers)\r\n            .then((response) => {\r\n                if (response.data.accessToken) {\r\n                    sessionStorage.setItem('user', JSON.stringify(response.data));\r\n                }\r\n                console.log(response);\r\n                return response;\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                throw err;\r\n            });\r\n    };\r\n\r\n    SignOut = () => {\r\n        const {push} = useHistory();\r\n        sessionStorage.clear();\r\n        push('/auth/signin');\r\n    };\r\n\r\n    register = async (firstname, lastname, username, email, password) => {\r\n        return axios.post('/api/auth/signup', {\r\n            firstname,\r\n            lastname,\r\n            username,\r\n            email,\r\n            password\r\n        });\r\n    };\r\n\r\n    getCurrentUser = () => {\r\n        return JSON.parse(localStorage.getItem('user'));\r\n    };\r\n}\r\n\r\nexport default new AuthenticationService();\r\n","import React, {useState} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {Alert, Button, Form} from 'react-bootstrap';\r\nimport './../../../assets/scss/style.scss';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport Breadcrumb from '../../../App/layout/AdminLayout/Breadcrumb';\r\nimport AuthenticationService from '../../../services/AuthenticationService';\r\nimport {Zoom,toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\ntoast.configure();\r\n\r\n\r\nconst SignUp1 = () => {\r\n    const [form, setForm] = useState({});\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const {push} = useHistory();\r\n\r\n    const setField = (field, value) => {\r\n        setForm({\r\n            ...form,\r\n            [field]: value\r\n        });\r\n        // Check and see if errors exist, and remove them from the error object:\r\n        if (!!errors[field])\r\n            setErrors({\r\n                ...errors,\r\n                [field]: null\r\n            });\r\n    };\r\n    const doLogin = async (event) => {\r\n        event.preventDefault();\r\n        // get our new errors\r\n        const newErrors = findFormErrors();\r\n        // Conditional logic:\r\n        if (Object.keys(newErrors).length > 0) {\r\n            // We got errors!\r\n            setErrors(newErrors);\r\n        } else {\r\n            toast.success('Logged in Successfully.', {\r\n                position: \"top-right\",\r\n                autoClose: 2500,\r\n                transition:Zoom,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n            push('/dashboard');\r\n            // No errors! Put any logic here for the form submission!\r\n            // AuthenticationService.signin(form.username, form.password).then(() => {\r\n            //\r\n            //         toast.success('Logged in Successfully.', {\r\n            //             position: \"top-right\",\r\n            //             autoClose: 2500,\r\n            //             transition:Zoom,\r\n            //             hideProgressBar: false,\r\n            //             closeOnClick: true,\r\n            //             pauseOnHover: true,\r\n            //             draggable: true,\r\n            //             progress: undefined,\r\n            //         });\r\n            //         push('/dashboard');\r\n            //     },\r\n            //     (error) => {\r\n            //     console.log(error);\r\n            //         console.log('Login fail: error = { ' + error.toString() + ' }');\r\n            //         if(error.toString().includes('401')){\r\n            //         toast.error('oops! Please confirm your username and password', {\r\n            //             position: \"top-right\",\r\n            //             autoClose: 5000,\r\n            //             transition:Zoom,\r\n            //             hideProgressBar: false,\r\n            //             closeOnClick: true,\r\n            //             pauseOnHover: true,\r\n            //             draggable: true,\r\n            //             progress: undefined,\r\n            //         });\r\n            //         setErrors({\r\n            //             logError:\r\n            //                 'oops! Please confirm your username and password'\r\n            //         });\r\n            //         }\r\n            //         else{\r\n            //             toast.error('Login fail: error = { ' + error.toString() + ' }', {\r\n            //                 position: \"top-right\",\r\n            //                 autoClose: 5000,\r\n            //                 transition:Zoom,\r\n            //                 hideProgressBar: false,\r\n            //                 closeOnClick: true,\r\n            //                 pauseOnHover: true,\r\n            //                 draggable: true,\r\n            //                 progress: undefined,\r\n            //             });\r\n            //             setErrors({\r\n            //                 logError:\r\n            //                     'Login fail: error = { ' + error.toString() + ' }'\r\n            //             });\r\n            //         }\r\n            //     }\r\n            // )            ;\r\n        }\r\n    };\r\n\r\n    const findFormErrors = () => {\r\n        const {username, password} = form;\r\n        const newErrors = {};\r\n        // username errors\r\n        if (!username || username === '')\r\n            newErrors.username = 'username cannot be blank!';\r\n        // food errors\r\n        if (!password || password === '')\r\n            newErrors.password = 'password cannot be blank!';\r\n\r\n        return newErrors;\r\n    };\r\n    return (\r\n        <Aux>\r\n            <Breadcrumb/>\r\n            <div className=\"auth-wrapper\">\r\n                <div className=\"auth-content\">\r\n                    <div className=\"auth-bg\">\r\n                        <span className=\"r\"/>\r\n                        <span className=\"r s\"/>\r\n                        <span className=\"r s\"/>\r\n                        <span className=\"r\"/>\r\n                    </div>\r\n                    <div className=\"card\">\r\n                        <div className=\"card-body text-center\">\r\n                            <div className=\"mb-4\">\r\n                                <i className=\"feather icon-unlock auth-icon\"/>\r\n                            </div>\r\n                            <h3 className=\"mb-4\"> ENZI HUB JOB DESK.</h3>\r\n                            <Form>\r\n                                <Form.Group controlId=\"username\">\r\n                                    <Form.Label>Username</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        placeholder=\"username\"\r\n                                        onChange={(e) => setField('username', e.target.value)}\r\n                                        isInvalid={!!errors.username}\r\n                                    />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {errors.username}\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"password\">\r\n                                    <Form.Label>password</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        placeholder=\"password\"\r\n                                        onChange={(e) => setField('password', e.target.value)}\r\n                                        isInvalid={!!errors.password}\r\n                                    />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {errors.password}\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n                                <Button onClick={doLogin} type=\"submit\" variant=\"primary\">\r\n                                    Login..\r\n                                </Button>\r\n                                {Object.prototype.hasOwnProperty.call(errors, 'logError') && (\r\n                                    <Alert variant=\"danger\">{errors.logError}</Alert>\r\n                                )}\r\n                            </Form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Aux>\r\n    );\r\n};\r\n\r\nexport default SignUp1;\r\n"],"sourceRoot":""}