{"version":3,"sources":["jdcomponents/JobPositions/JobPositions.js","jdcomponents/JobPositions/constants.js"],"names":["columns","constants","tableColumns","AddJobPosition","React","lazy","useStyles","makeStyles","root","width","container","maxHeight","USER_LIST_URL","process","REACT_APP_KB_PORTAL_USER_LIST","USER_SEARCH_URL","REACT_APP_KB_PORTAL_USER_SEARCH","LIST_ALL_ROLES","REACT_APP_KB_PORTAL_USER_LIST_ALL_ROLES","JobPositions","classes","useState","page","setPage","pageRef","rowsPerPage","setRowsPerPage","rowsPerPageRef","setTotalElements","totalElementsref","setRowData","rowDataref","setSearchNotFound","searchNotFoundref","setSearchValue","searchValueref","setIsLoading","isLoadingref","setModalOpen","modalOpenref","key","text","value","setAllRoles","allRolesref","setMount","mountedRef","fetchData","a","currentPage","current","BackendService","getPaginatedRequest","response","data","payload","content","totalElements","console","error","fetchRoles","getRequest","roles","map","role","push","id","name","JSON","stringify","handleSearchChange","toFilter","filter","item","username","toUpperCase","includes","length","filterData","useEffect","Body","className","md","active","indeterminate","onClick","primary","icon","Append","placeholder","aria-label","aria-describedby","onChange","e","target","action","modalOpen","handleClose","allRoles","valueIntoModal","email","firstName","lastName","userRole","userStatus","rowsPerPageOptions","component","count","onChangePage","event","newPage","onChangeRowsPerPage","size","stickyHeader","style","minWidth","column","align","label","row","index","hover","tabIndex","format","defaultProps","module","exports","Object","freeze"],"mappings":"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","file":"static/js/16.46c139d1.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport './JobPositions.scss';\nimport useState from \"react-usestateref\";\nimport BackendService from \"../../services/BackendService\";\nimport Aux from \"../../hoc/_Aux\";\nimport {Card, Col, FormControl, InputGroup, Row} from \"react-bootstrap\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {Button, Dimmer, Loader, Segment} from \"semantic-ui-react\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport constants from './constants'\n\nconst columns = constants.tableColumns;\n\nconst AddJobPosition = React.lazy(() => import('./AddJobPosition'));\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%'\n    },\n    container: {\n        maxHeight: 440\n    }\n});\n\nconst USER_LIST_URL = process.env.REACT_APP_KB_PORTAL_USER_LIST;\nconst USER_SEARCH_URL = process.env.REACT_APP_KB_PORTAL_USER_SEARCH;\nconst LIST_ALL_ROLES = process.env.REACT_APP_KB_PORTAL_USER_LIST_ALL_ROLES;\n\nconst JobPositions = () => {\n    const classes = useStyles();\n    const [page, setPage, pageRef] = useState(0);\n    const [rowsPerPage, setRowsPerPage, rowsPerPageRef] = useState(10);\n    const [totalElements, setTotalElements, totalElementsref] = useState(0);\n    const [rowData, setRowData, rowDataref] = useState([]);\n    const [searchNotFound, setSearchNotFound, searchNotFoundref] = useState(false);\n    const [searchValue, setSearchValue, searchValueref] = useState('');\n    const [isLoading, setIsLoading, isLoadingref] = useState(false);\n    const [modalOpen, setModalOpen, modalOpenref] = useState(false);\n    const [allRoles, setAllRoles, allRolesref] = useState([{key: 0, text: '', value: '0'}]);\n    const [mounted, setMount, mountedRef] = useState(false);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const fetchData = async () => {\n        try {\n            const currentPage = pageRef.current < 0 ? 0 : pageRef.current;\n            const response = await BackendService.getPaginatedRequest(\n                searchNotFoundref.current ? USER_SEARCH_URL : USER_LIST_URL,\n                currentPage,\n                rowsPerPageRef.current,\n                searchValueref.current\n            );\n            const data = response.data;\n            setRowData(data.payload.content);\n            setTotalElements(data.payload.totalElements);\n            setIsLoading(false);\n        } catch (e) {\n            console.error(e);\n        }\n\n        await fetchRoles();\n    };\n\n    const fetchRoles = async () => {\n        // BackendService.validateMenu( );\n        if(!mountedRef.current){\n            try {\n                const response = await BackendService.getRequest(LIST_ALL_ROLES);\n                const data = response.data?.payload;\n                let roles = [];\n                data.map((role) => {\n                    roles.push({\n                        key: role.id,\n                        text: role.name,\n                        value: JSON.stringify(role)\n                    });\n                });\n                setAllRoles(roles);\n                setMount(true);\n            } catch (e) {\n                console.error(e);\n            }}\n    };\n    const filterData = (value) => {\n        let toFilter = rowDataref.current;\n        toFilter = toFilter.filter(function (item) {\n            return item.username.toUpperCase().includes(value.toUpperCase());\n        }).map(function (item) {\n            return item;\n        });\n        setRowData(toFilter);\n        return toFilter.length > 0;\n    };\n    const handleSearchChange = (value) => {\n        setSearchValue(value);\n        setIsLoading(true);\n        if (filterData(value)) {\n            setIsLoading(false);\n        } else {\n            setSearchNotFound(true);\n        }\n    };\n\n    useEffect(() => {\n        (async function () {\n            fetchData();\n        })();\n    }, [page, rowsPerPage, setSearchNotFound]);\n\n    const resetData = () => {\n        setSearchNotFound(false);\n        setIsLoading(false);\n        setSearchValue('');\n        fetchData();\n    };\n\n    return (\n        <Aux>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <Row>\n                                <Col>\n                                    <Paper className={classes.root}>\n                                        <Row>\n                                            <Col md={'auto'}>\n\n                                                <Dimmer active={isLoadingref.current}>\n                                                    <Loader indeterminate>Searching payment ...</Loader>\n                                                </Dimmer>\n                                                <InputGroup className=\"mb-3\">\n                                                    <Button\n                                                        onClick={resetData}\n                                                        primary\n                                                        icon=\"refresh\"\n                                                    ></Button>\n                                                    <InputGroup.Append>\n                                                        <FormControl\n                                                            placeholder=\"search...\"\n                                                            aria-label=\"search...\"\n                                                            value={searchValueref.current}\n                                                            aria-describedby=\"basic-addon2\"\n                                                            onChange={(e) => handleSearchChange(e.target.value)}\n                                                        />\n                                                    </InputGroup.Append>\n                                                    <InputGroup.Append>\n                                                        <AddJobPosition // The invisible modal itself\n                                                            key=\"modal1\"\n                                                            action={\"add\"}\n                                                            modalOpen={modalOpenref.current}\n                                                            handleClose={() => {\n                                                                setModalOpen(false);\n                                                            }}\n                                                            allRoles={allRolesref.current}\n                                                            valueIntoModal={{\n                                                                username: '',\n                                                                email: '',\n                                                                firstName: '',\n                                                                lastName: '',\n                                                                userRole: '',\n                                                                userStatus: ''\n                                                            }}\n                                                        />\n                                                    </InputGroup.Append>\n                                                </InputGroup>\n                                            </Col>\n                                            <Col>\n\n                                                <TablePagination\n                                                    rowsPerPageOptions={[10, 25, 100]}\n                                                    component=\"div\"\n                                                    count={totalElementsref.current}\n                                                    rowsPerPage={rowsPerPageRef.current}\n                                                    page={pageRef.current}\n                                                    onChangePage={handleChangePage}\n                                                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                                                />\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col>\n                                                <TableContainer className={classes.container}>\n                                                    <Table\n                                                        size=\"small\"\n                                                        stickyHeader\n                                                        aria-label=\" sticky table\"\n                                                    >\n                                                        <TableHead>\n                                                            <TableRow>\n                                                                <TableCell\n                                                                    key=\"0\"\n                                                                    style={({minWidth: 10})}\n                                                                >\n                                                                    No\n                                                                </TableCell>\n                                                                {columns.map((column) => (\n                                                                    <TableCell\n                                                                        key={column.id}\n                                                                        align={column.align}\n                                                                        style={{minWidth: column.minWidth}}\n                                                                    >\n                                                                        {column.label}\n                                                                    </TableCell>\n                                                                ))}\n                                                            </TableRow>\n                                                        </TableHead>\n                                                        <TableBody>\n                                                            {rowDataref.current.map((row, index) => {\n                                                                return (\n                                                                    <TableRow\n                                                                        hover\n                                                                        role=\"checkbox\"\n                                                                        tabIndex={-1}\n                                                                        key={row.id}\n                                                                    >\n                                                                        <TableCell\n                                                                            key={index + 1}\n                                                                            style={({minWidth: 10})}\n                                                                        >\n                                                                            {index + 1}\n                                                                        </TableCell>\n                                                                        {columns.map((column) => {\n                                                                            const value = row[column.id];\n                                                                            return (\n                                                                                <TableCell\n                                                                                    key={column.id}\n                                                                                    align={column.align}\n                                                                                    style={{minWidth: column.minWidth}}\n                                                                                >\n                                                                                    {column.format\n                                                                                        ? column.format(value)\n                                                                                        : value}\n                                                                                </TableCell>\n                                                                            );\n                                                                        })}\n                                                                        <TableCell key={row.id + '' + index + 1}>\n                                                                            <AddJobPosition // The invisible modal itself\n                                                                                key={row.id + '' + index + 7}\n                                                                                action={\"edit\"}\n                                                                                modalOpen={modalOpenref.current}\n                                                                                handleClose={() => {\n                                                                                    setModalOpen(false);\n                                                                                }}\n                                                                                allRoles={allRolesref.current}\n                                                                                valueIntoModal={row}\n                                                                            />\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                );\n                                                            })}\n                                                        </TableBody>\n                                                    </Table>\n                                                </TableContainer>\n                                            </Col>\n                                        </Row>\n\n\n                                    </Paper>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Aux>\n    );\n};\n\nJobPositions.propTypes = {};\n\nJobPositions.defaultProps = {};\n\nexport default JobPositions;\n","module.exports = Object.freeze({\n    tableColumns: [\n        {id: 'username', label: 'Department', minWidth: 170},\n        {id: 'firstName', label: 'Job Group', minWidth: 170},\n        {id: 'email', label: 'Job TItle', minWidth: 170},\n        {id: 'lastName', label: 'Terms of Service', minWidth: 170},\n\n    ]\n});\n"],"sourceRoot":""}